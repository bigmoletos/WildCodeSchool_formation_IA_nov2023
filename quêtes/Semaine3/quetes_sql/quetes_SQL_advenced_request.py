
import sqlite3

# Se connecter √† la base de donn√©es SQLite
connexion = sqlite3.connect(r"qu√™tes\Semaine3\quetes_sql\quete_movies_sql\movies.sqlite")

# Cr√©er un objet curseur
curseur = connexion.cursor()

# Ex√©cuter une requ√™te SQL
requete_sql="""SELECT m.original_title, m.popularity
 FROM movies as m
 ORDER BY m.popularity DESC
 LIMIT 3;"""

curseur.execute(requete_sql)

# R√©cup√©rer tous les r√©sultats
resultats = curseur.fetchall()

print(resultats)

# Fermer la connexion
connexion.close()
# #--------

# # ex de requete en python
# # csvsql --query "SELECT * FROM nom_de_la_table WHERE condition" mon_fichier.csv

# #-------------------------------------


# # 1 Le top 3 des films les plus populaires
#  SELECT m.original_title, m.popularity
#  FROM movies as m
#  ORDER BY m.popularity DESC
#  LIMIT 3;

# #-------------------------------------

#  #2 Le nombre de films par r√©alisateur
# SELECT d.name, COUNT(m.director_id) as nombre_de_films
# FROM directors d
# JOIN movies m ON d.id = m.director_id
# GROUP BY d.name
# ORDER BY nombre_de_films DESC;

# # autre solution avec une vue producteur_movies:
# # creation de la vue
# CREATE VIEW producteur_movies AS
# SELECT d.name as name, m.title as movie_title
# FROM directors d
# JOIN movies m ON d.id = m.director_id;

# # requete utilisant la vue
# SELECT pm.name, COUNT(pm.movie_title) as nombre_de_films
# FROM producteur_movies pm
# GROUP BY name
# ORDER BY nombre_de_films DESC;

# #-------------------------------------

# #3 --Le top 5 des r√©alisateurs ayant r√©alis√© des b√©n√©fices au cours de leur carri√®re.
# SELECT d.name, SUM(m.revenue) as profits
# FROM directors d
# JOIN movies m ON d.id = m.director_id
# GROUP BY d.name
# ORDER BY profits DESC
# LIMIT 5;

# # 4--Le nombre de films par r√©alisateur dont la popularit√© est
# # inf√©rieure √† 10.Puis, la moyenne des notes de ces films.
# SELECT
# d.name as directors_name,
# COUNT(m.popularity) as ranking ,
# AVG(m.vote_average) as Average_note
# FROM directors d
# JOIN movies m ON d.id = m.director_id
# WHERE m.popularity <10
# GROUP BY d.name
# ORDER BY ranking DESC;

# #-------------------------------------
# #5 --Tu vas maintenant cr√©er une VIEW qui contient les r√©alisatrices,
# # --chacun de leur film ainsi que le nombre de votant par film.
# # --Enfin, √† partir de cette vue, on veut le classement des r√©alisatrices
# # --en fonction du nombre de films, pour les films ayant plus de 1000 votants.

# # --cr√©ation de la vue

# CREATE VIEW woman_directors_with_votes AS
# SELECT d.name, m.original_title, m.vote_count
# FROM movies m
# JOIN directors d ON d.id = m.director_id
# WHERE d.gender =1;

# # --cr√©ation de la requete

# SELECT
# name as productrice_name,
# COUNT(original_title) as number_of_movies
# FROM woman_directors_with_votes
# WHERE vote_count  > 1000
# GROUP BY name
# ORDER BY number_of_movies DESC;

# #-------------------------------------
# -- good_movies source
# 6 Pour chaque r√©alisateur, Le top 3 des films dont la note moyenne est sup√©rieure √† 8 et r√©alis√© apr√®s 2000, en fonction de la note moyenne.

CREATE VIEW good_movies AS
SELECT
    d.name AS realisateur,
    m.title AS titre,
    m.vote_average AS note_moyenne
FROM
    directors d
JOIN
    movies m ON m.director_id = d.id
WHERE
    m.vote_average > 8 AND m.release_date > 2000;

# requete sans utiliser la vue:
# --cr√©ation colonne ranking qui attribue un rang √† chaque film pour chaque
    # r√©alisateur en fonction de la moyenne du film
    # Les films avec des notes moyennes plus √©lev√©es re√ßoivent des rangs plus bas

WITH ranked_movies AS (
    SELECT
        d.name AS realisateur,
        m.title AS titre,
        m.vote_average AS note_moyenne,
        ROW_NUMBER() OVER(PARTITION BY d.name ORDER BY m.vote_average DESC) as ranking
    FROM
        directors d
    JOIN
        movies m ON d.id = m.director_id
    WHERE
        m.vote_average > 8 AND m.release_date > '2000-01-01'
)
SELECT
    realisateur,
    titre,
    note_moyenne,
    ranking
FROM
    ranked_movies
WHERE
    ranking <= 3;

# #-------------------------------------

#--7 Pour chaque film dont le nombre de votant est sup√©rieur √† 1000, on veut √©galement faire appara√Ætre le film pr√©c√©dent du m√™me r√©alisateur, sa note et sa date de sortie. Il faut aussi cr√©er une colonne qui prend en compte la diff√©rence de "vote_average" entre le film actuel et le film pr√©c√©dent.
# Enfin, il faut ordonner en fonction de la meilleure progression entre le film pr√©c√©dent et le film actuel.


WITH ranked_movies AS (
    SELECT
        d.name AS realisateur,
        m.title AS titre,
        m.vote_average AS note_moyenne,
        m.release_date AS date_sortie,
        LAG(m.title) OVER(PARTITION BY d.name ORDER BY m.release_date) AS titre_precedent,
        LAG(m.vote_average) OVER(PARTITION BY d.name ORDER BY m.release_date) AS note_moyenne_precedente,
        m.vote_average - LAG(m.vote_average) OVER(PARTITION BY d.name ORDER BY m.release_date) AS progression
    FROM
        directors d
    JOIN
        movies m ON d.id = m.director_id
    WHERE
        m.vote_count > 1000
)
SELECT
    realisateur,
    titre,
    note_moyenne,
    date_sortie,
    titre_precedent,
    note_moyenne_precedente,
    progression
FROM
    ranked_movies
ORDER BY
    progression DESC;

# explications:
# WITH : Le mot-cl√© WITH est utilis√© pour cr√©er une requ√™te de CTE (Common Table Expression). Une CTE est une table temporaire que vous pouvez r√©f√©rencer dans une autre instruction SQL. Dans votre requ√™te, WITH ranked_movies AS (...) cr√©e une CTE nomm√©e ranked_movies. Vous pouvez ensuite utiliser cette CTE comme une table normale dans votre requ√™te.

# LAG : La fonction LAG() est une fonction d‚Äôanalyse de fen√™tre qui renvoie la valeur de la ligne pr√©c√©dente dans le r√©sultat de la requ√™te. Par exemple, LAG(m.title) OVER(PARTITION BY d.name ORDER BY m.release_date) renvoie le titre du film pr√©c√©dent du m√™me r√©alisateur.

# OVER : Le mot-cl√© OVER est utilis√© pour d√©finir une fen√™tre de lignes sur lesquelles la fonction d‚Äôanalyse de fen√™tre (comme LAG()) est appliqu√©e. Par exemple, OVER(PARTITION BY d.name ORDER BY m.release_date) d√©finit une fen√™tre de lignes pour chaque r√©alisateur, ordonn√©es par la date de sortie du film.

# Donc, en r√©sum√©, votre requ√™te cr√©e une table temporaire ranked_movies qui contient le r√©alisateur, le titre, la note moyenne, la date de sortie, le titre du film pr√©c√©dent, la note moyenne du film pr√©c√©dent et la progression de la note moyenne pour chaque film dont le nombre de votants est sup√©rieur √† 1000.

SELECT
    d.name AS realisateur,
    m.title AS titre,
    m.budget,
    CASE
        WHEN m.budget BETWEEN 1 AND 100 THEN '1$ - 100$'
        WHEN m.budget BETWEEN 101 AND 10000 THEN '100$ - 10k$'
        WHEN m.budget BETWEEN 10001 AND 100000 THEN '10k$ - 100k$'
        WHEN m.budget BETWEEN 100001 AND 1000000 THEN '100k$ - 1M$'
        WHEN m.budget BETWEEN 1000001 AND 100000000 THEN '1M$ - 100M$'
        WHEN m.budget BETWEEN 100000001 AND 250000000 THEN '100M$ - 250M$'
        ELSE '> 250M$'
    END AS intervalle_budget
FROM
    directors d
JOIN
    movies m ON d.id = m.director_id;

--ORDER BY intervalle_budget DESC;


# #-------------------------------------

# 8 Il est possible de cr√©er des colonnes cat√©gorielles.
# Par exemple, tu peux cr√©er une colonne √† partir de plusieurs conditions.Pour √ßa, tu vas utiliser la clause CASEetWHEN.

# ü§î Pour chaque film, on aimerait une information suppl√©mentaire (donc une colonne suppl√©mentaire). Tu vas cr√©er plusieurs intervalles:
# [1$ - 100$, 100$ - 10k$, 10k$ - 100k$, 100k$ - 1M$, 1M$ - 100M$, 100M$ - 250M$, > 250M$]
# En plus de cette information, tu afficheras pour chaque film: le nom du r√©alisateur, le titre du film et le budget.

SELECT
    d.name AS realisateur,
    m.title AS titre,
    m.budget,
    CASE
        WHEN PERCENT_RANK() OVER (ORDER BY m.budget) BETWEEN 0 AND 0.2 THEN '0 - 0.2 Percentile'
        WHEN PERCENT_RANK() OVER (ORDER BY m.budget) BETWEEN 0.2 AND 0.4 THEN '0.2 - 0.4 Percentile'
        WHEN PERCENT_RANK() OVER (ORDER BY m.budget) BETWEEN 0.4 AND 0.6 THEN '0.4 - 0.6 Percentile'
        WHEN PERCENT_RANK() OVER (ORDER BY m.budget) BETWEEN 0.6 AND 0.8 THEN '0.6 - 0.8 Percentile'
        ELSE '0.8 - 1 Percentile'
    END AS bucket
FROM
    directors d
JOIN
    movies m ON d.id = m.director_id;






# #-------------------------------------
# 10 combien de films il y a par cat√©gorie de la colonne "Budget_Bucket_$".
WITH budget_buckets AS (
    SELECT
        d.name AS realisateur,
        m.title AS titre,
        m.budget,
        CASE
            WHEN PERCENT_RANK() OVER (ORDER BY m.budget) BETWEEN 0 AND 0.2 THEN '0 - 0.2 Percentile'
            WHEN PERCENT_RANK() OVER (ORDER BY m.budget) BETWEEN 0.2 AND 0.4 THEN '0.2 - 0.4 Percentile'
            WHEN PERCENT_RANK() OVER (ORDER BY m.budget) BETWEEN 0.4 AND 0.6 THEN '0.4 - 0.6 Percentile'
            WHEN PERCENT_RANK() OVER (ORDER BY m.budget) BETWEEN 0.6 AND 0.8 THEN '0.6 - 0.8 Percentile'
            ELSE '0.8 - 1 Percentile'
        END AS Budget_Bucket_$
    FROM
        directors d
    JOIN
        movies m ON d.id = m.director_id
)
SELECT
    Budget_Bucket_$,
    COUNT(*) AS nombre_de_films
FROM
    budget_buckets
GROUP BY
    Budget_Bucket_$;

# Est-ce qu'une autre id√©e te vient √† l'esprit pour cr√©er des buckets de fa√ßon ing√©nieuse ?

SELECT
    d.name AS realisateur,
    m.title AS titre,
    m.budget,
    NTILE(5) OVER (ORDER BY m.budget) AS Budget_Bucket
FROM
    directors d
JOIN
    movies m ON d.id = m.director_id;



# #-------------------------------------
# Une autre possibilit√© pour cr√©er des Buckets, c'est d'utiliser la fonction NTILE(). Cette fonction, tr√®s pratique, te permet de diviser tes donn√©es en quantit√© encore plus √©quitable que ce que tu as fait √† la question pr√©c√©dente.

# ü§î On aimerait avoir ici 5 Buckets, ou chacun des buckets on respectivement [752, 752, 752, 752, 751]films.
# Pour chaque bucket, on veut le nombre de films, le plus petit budget de chaque bucket, le plus gros budget de chaque bucket, et enfin le budget moyen pour chaque bucket.


WITH budget_buckets AS (
    SELECT
        d.name AS realisateur,
        m.title AS titre,
        m.budget,
        NTILE(5) OVER (ORDER BY m.budget) AS Budget_Bucket
    FROM
        directors d
    JOIN
        movies m ON d.id = m.director_id
)
SELECT
    Budget_Bucket,
    COUNT(*) AS nombre_de_films,
    MIN(budget) AS budget_min,
    MAX(budget) AS budget_max,
    AVG(budget) AS budget_moyen
FROM
    budget_buckets
GROUP BY
    Budget_Bucket;


# # Fermer la connexion
# connexion.close()